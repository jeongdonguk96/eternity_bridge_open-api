plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.3.12'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	id("org.jetbrains.kotlin.kapt") version "1.9.25"
}

group = 'com.eternity-bridge'
version = '0.0.1-SNAPSHOT'
def kotestVersion = "5.6.2"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// 디펜던시
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("io.github.oshai:kotlin-logging-jvm:5.1.1")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	runtimeOnly("org.mariadb.jdbc:mariadb-java-client")
	runtimeOnly("com.h2database:h2")

	// Querydsl 의존성 추가
	implementation("com.querydsl:querydsl-jpa:5.0.0:jakarta")
	kapt("com.querydsl:querydsl-apt:5.0.0:jakarta")
	kapt("jakarta.annotation:jakarta.annotation-api")
	kapt("jakarta.persistence:jakarta.persistence-api")

	// 테스트
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
	testImplementation("com.h2database:h2")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")

	// KOTEST
	testImplementation("io.kotest:kotest-runner-junit5-jvm:${kotestVersion}")
	testImplementation("io.kotest:kotest-assertions-core-jvm:${kotestVersion}")
	testImplementation("io.kotest.extensions:kotest-extensions-spring:1.1.3")

	// Fixture Monkey
	testImplementation("com.navercorp.fixturemonkey:fixture-monkey-kotlin:1.1.11")
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

// Querydsl QClass 생성 경로 설정
sourceSets {
	main {
		kotlin.srcDir("$buildDir/generated/source/kapt/main")
	}
}

tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory = file("$projectDir/src/main/generated")
}

tasks.clean {
	delete("src/main/generated")
}

tasks.named('test') {
	useJUnitPlatform()
}